name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: windows  
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Test build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "🔨 Testing build for ${{ matrix.goos }}/${{ matrix.goarch }}..."
        
        # 创建临时构建环境
        mkdir -p build-test
        cd build-test
        go mod init test-derper
        go get tailscale.com/cmd/derper@v1.82.1
        
        cat > main.go << 'EOF'
        package main
        
        import "tailscale.com/cmd/derper"
        
        func main() {
            derper.Main()
        }
        EOF
        
        # 测试构建
        go build -a -ldflags="-s -w" -o derper .
        
        if [ -f "derper" ] || [ -f "derper.exe" ]; then
          echo "✅ Build test passed"
        else
          echo "❌ Build test failed"  
          exit 1
        fi