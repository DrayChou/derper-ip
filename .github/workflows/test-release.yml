name: Test Release Build

on:
  workflow_dispatch:
  push:
    tags: [ 'test-*' ]

jobs:
  test-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Test single platform build
      run: |
        echo "🔧 Testing build process..."
        
        # 创建临时构建目录
        mkdir -p build-temp
        cd build-temp
        
        # 初始化 Go 模块
        go mod init test-derper
        go get tailscale.com/cmd/derper@v1.82.1
        
        # 创建 main.go
        cat > main.go << 'EOF'
        package main
        
        import "tailscale.com/cmd/derper"
        
        func main() {
            derper.Main()
        }
        EOF
        
        echo "📋 Go module info:"
        go list -m all | grep tailscale
        
        # 测试构建 Linux AMD64
        echo "🔨 Building Linux AMD64..."
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags="-s -w" -o derper-linux-amd64 .
        
        if [ -f "derper-linux-amd64" ]; then
          echo "✅ Linux AMD64 build successful"
          ls -la derper-linux-amd64
          file derper-linux-amd64
        else
          echo "❌ Linux AMD64 build failed"
          exit 1
        fi
        
        # 测试构建 Windows AMD64
        echo "🔨 Building Windows AMD64..."
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -a -ldflags="-s -w" -o derper-windows-amd64.exe .
        
        if [ -f "derper-windows-amd64.exe" ]; then
          echo "✅ Windows AMD64 build successful"
          ls -la derper-windows-amd64.exe
          file derper-windows-amd64.exe
        else
          echo "❌ Windows AMD64 build failed"
          exit 1
        fi
        
        echo "🎉 All test builds completed successfully!"

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-binaries
        path: build-temp/derper-*
        retention-days: 1