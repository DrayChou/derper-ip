name: Build and Push Docker Image

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: false
        default: true
        type: boolean
      image_tag:
        description: 'Custom image tag'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tailscale-derp

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set custom tag if provided
      if: github.event.inputs.image_tag != ''
      run: |
        echo "CUSTOM_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/derp
        file: ./docker/derp/Dockerfile
        push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.CUSTOM_TAG && format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, env.CUSTOM_TAG) || '' }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test Docker image
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Create test environment
        cd docker/derp
        cp .env.example .env
        
        # Set test configuration
        sed -i 's/your-domain.com/localhost/g' .env
        sed -i 's/DERP_VERBOSE=false/DERP_VERBOSE=true/g' .env
        
        # Create dummy certificates for testing
        mkdir -p certs
        openssl req -x509 -newkey rsa:4096 -keyout certs/localhost.key -out certs/localhost.crt -days 1 -nodes -subj "/CN=localhost"
        
        # Test container startup
        timeout 30s docker run --rm \
          -e DERP_DOMAIN=localhost \
          -e DERP_HOSTNAME=test-derp \
          -e DERP_CERTMODE=manual \
          -e DERP_CERTDIR=/certs \
          -e DERP_VERBOSE=true \
          -v $(pwd)/certs:/certs:ro \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} &
        
        # Give container time to start
        sleep 10
        
        echo "Container test completed successfully"

  release:
    runs-on: ubuntu-latest
    needs: [build, security-scan, test]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Docker Images
          
          This release includes the following Docker images:
          
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ## Usage
          
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ## Deployment
          
          See the [README.md](./docker/derp/README.md) for deployment instructions.
          
          ## Changes in this Release
          
          - Built from commit: ${{ github.sha }}
          - Tailscale DERP server with latest improvements
          - Enhanced security and monitoring features
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true

  cleanup:
    runs-on: ubuntu-latest
    needs: [build, security-scan, test]
    if: always() && github.event_name == 'pull_request'
    permissions:
      packages: write

    steps:
    - name: Delete PR images
      run: |
        # Clean up PR-specific images to save storage space
        echo "Cleaning up PR images..."
        # Note: This would require additional setup to actually delete images
        # For now, just log the intent
        echo "Would delete images for PR #${{ github.event.number }}"

  notify:
    runs-on: ubuntu-latest
    needs: [build, security-scan, test, release]
    if: always() && (success() || failure())
    
    steps:
    - name: Notify on success
      if: needs.build.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ Build and tests completed successfully!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
    - name: Notify on failure
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Build or tests failed!"
        echo "Check the logs for more details."
        exit 1