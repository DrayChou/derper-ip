name: Release Cross-Platform Binaries

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  BINARY_NAME: derper
  
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5  
      with:
        go-version: '1.23'

    - name: Build all platform binaries
      run: |
        # 创建临时 Go 模块
        mkdir -p build-temp
        cd build-temp
        go mod init build-derper
        go get tailscale.com/cmd/derper@v1.82.1
        
        # 创建简单的 main.go
        cat > main.go << 'EOF'
        package main
        
        import "tailscale.com/cmd/derper"
        
        func main() {
            derper.Main()
        }
        EOF
        
        # 定义要构建的平台
        platforms=(
          "linux/amd64"
          "linux/arm64" 
          "linux/arm/7"
          "windows/amd64"
          "windows/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "freebsd/amd64"
        )
        
        mkdir -p ../dist
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r goos goarch goarm <<< "$platform"
          
          # 设置文件扩展名
          ext=""
          if [ "$goos" = "windows" ]; then
            ext=".exe"
          fi
          
          # 构建二进制文件名
          if [ -n "$goarm" ]; then
            binary_name="${{ env.BINARY_NAME }}-${goos}-${goarch}v${goarm}${ext}"
          else
            binary_name="${{ env.BINARY_NAME }}-${goos}-${goarch}${ext}"
          fi
          
          echo "🔨 Building $binary_name for $goos/$goarch..."
          
          # 交叉编译
          env CGO_ENABLED=0 GOOS=$goos GOARCH=$goarch GOARM=$goarm \
            go build -a -ldflags="-s -w" -o "../dist/$binary_name" .
          
          # 验证文件生成
          if [ -f "../dist/$binary_name" ]; then
            echo "✅ Successfully built: $binary_name ($(stat -c%s "../dist/$binary_name" 2>/dev/null || stat -f%z "../dist/$binary_name" 2>/dev/null || echo "unknown") bytes)"
          else
            echo "❌ Failed to build: $binary_name"
            exit 1
          fi
        done
        
        cd ..
        
        # 创建压缩包
        for file in dist/derper-*; do
          if [ -f "$file" ]; then
            basename=$(basename "$file")
            
            if [[ "$basename" == *".exe" ]]; then
              # Windows 压缩包
              zip_name="${basename%.exe}.zip"
              zip "dist/$zip_name" "$file" scripts/start.sh scripts/start.bat scripts/deploy.sh README.md
              echo "📦 Created: $zip_name"
            else
              # Unix 压缩包
              tar_name="${basename}.tar.gz"
              tar -czf "dist/$tar_name" "$file" scripts/start.sh scripts/deploy.sh README.md
              echo "📦 Created: $tar_name"
            fi
          fi
        done
        
        echo "📦 Build completed. Files in dist/:"
        ls -la dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: "DERP Server ${{ github.ref_name }}"
        body: |
          ## 🚀 Tailscale DERP Server - 跨平台二进制文件
          
          ### 📦 支持平台
          
          - **Linux**: AMD64, ARM64, ARMv7
          - **Windows**: AMD64, ARM64  
          - **macOS**: Intel (AMD64), Apple Silicon (ARM64)
          - **FreeBSD**: AMD64
          
          ### 🎯 快速开始
          
          1. 下载适合你平台的二进制文件
          2. 解压文件
          3. 运行: `./derper-<platform> --hostname=YOUR_IP -certmode manual -certdir ./ -http-port -1 -a :9003 -stun-port 9004 -verify-clients`
          
          ### 📋 部署脚本
          
          每个压缩包都包含：
          - `start.sh` - Unix/Linux 启动脚本
          - `start.bat` - Windows 启动脚本  
          - `deploy.sh` - 自动化部署脚本 (Linux systemd)
          - `README.md` - 详细说明文档
          
          ### ⚙️ 配置示例
          
          ```bash
          # Linux 生产环境部署
          sudo ./deploy.sh 88.88.88.88 9003 9004
          
          # Windows 快速启动
          start.bat 88.88.88.88 9003 9004
          
          # macOS/FreeBSD 后台运行
          nohup ./start.sh 88.88.88.88 9003 9004 > derper.log 2>&1 &
          ```
          
          ---
          
          **构建信息**: `${{ github.sha }}`  
          **构建时间**: `${{ github.run_id }}`
        files: dist/*
        draft: false
        prerelease: false